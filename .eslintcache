[{"/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/index.js":"1","/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/reportWebVitals.js":"2","/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/App.js":"3","/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/component/TestCard.js":"4","/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/component/TestCardButton.js":"5","/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/component/ImageSlider.js":"6","/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/component/SliderData.js":"7"},{"size":500,"mtime":1606993163608,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1606993163610,"results":"10","hashOfConfig":"9"},{"size":784,"mtime":1607540911979,"results":"11","hashOfConfig":"9"},{"size":1006,"mtime":1607063036906,"results":"12","hashOfConfig":"13"},{"size":371,"mtime":1607004181809,"results":"14","hashOfConfig":"13"},{"size":1948,"mtime":1607540910570,"results":"15","hashOfConfig":"9"},{"size":3291,"mtime":1607540548783,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"14fjbny",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1f1ckcx",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/index.js",[],["37","38"],"/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/reportWebVitals.js",[],"/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/App.js",["39","40","41","42","43","44","45"],"import './App.css';\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row, Col, Alert, Button} from 'react-bootstrap';\nimport ImageSlider from './component/ImageSlider';\nimport {SliderData} from './component/SliderData';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  return (\n    <div >\n      <ImageSlider slides={SliderData}/>\n    </div>\n  );\n}\n\n\n\n// import TestCard from './component/TestCard';\n// import TestCardButton from './component/TestCardButton';\n/* <Container>\n        <TestCardButton count={count} setCount={setCount}/>\n        <Row>\n          <TestCard count={count} />\n        </Row>\n        <Alert variant=\"succes\">This is a button</Alert>\n      <h1>Hello</h1>\n</Container> */\nexport default App;\n","/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/component/TestCard.js",[],["46","47"],"/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/component/TestCardButton.js",["48"],"import React, {useState} from 'react';\nimport {Button} from 'react-bootstrap';\n\nfunction TestCardButton(props) {\n    let counts = props.count;\n    let setCount = props.setCount;\n    console.log(counts);\n   // const [count, setCount] = useState(0);\n    return (\n        <Button onClick={()=> setCount( counts + 1)}>{counts}</Button>\n    )\n}\n\nexport default TestCardButton\n","/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/component/ImageSlider.js",["49","50"],"import React, {useState} from 'react'\nimport '../css/ImageSlider.css';\nimport {SliderData} from './SliderData';\nimport {FaArrowUp, FaArrowDown} from 'react-icons/fa'\n\nconst ImageSlider = ({slides}) => {\n    const [current, setCurrent] = useState(0);\n    const length = slides.length\n    const zero = 0;\n    // <img src=\"/images/Y01.jpg\" className=\"photo\"/>\n    // onClick={nextSlide}\n    //  onClick={prevSlide}\n    const resetToFirst = () => {\n        setCurrent(current > 0 ? 0 : current + 1);\n    };\n\n    const resetToLast = () => {\n        setCurrent(current === 65 ? current - 1 : 65);\n    };\n\n    const nextSlide = () => {\n        setCurrent(current === length - 1 ? 0 : current + 1);\n    };\n\n    const prevSlide = () => {\n        setCurrent(current === 0 ? length - 1 : current - 1);\n    };\n\n    console.log(current);\n\n    // if (!Array.isArray(slides) || slides.length <= 0) {\n    //     return null;\n    // }\n\n    return (\n        <>  \n            <div className=\"slider\">\n                <FaArrowDown className=\"left-arrow\" onClick={prevSlide} />\n                <FaArrowUp className=\"right-arrow\" onClick={nextSlide} />\n                {SliderData.map((slide, index)=>{\n                    return  (\n                        <div\n                            className={index === current ? 'slide active' : 'slide'}\n                            key={index}\n                        >\n                            {index === current && (\n                            <img src={slide.image} alt='travel image' className='image' />\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n            <h1>對比景-視覺比對法</h1>\n            <h1>{current + 1}</h1>\n            <div className=\"reset\" onClick={resetToFirst}>重置到最前</div>\n            <div className=\"reset\" onClick={resetToLast}>重置到最後</div>\n        </>\n    )\n}\n\n\nexport default ImageSlider\n","/Users/luoshiqin/Desktop/react/react-practice/bs-practice/src/component/SliderData.js",[],["51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":4,"column":9,"nodeType":"59","messageId":"60","endLine":4,"endColumn":18},{"ruleId":"57","severity":1,"message":"61","line":4,"column":20,"nodeType":"59","messageId":"60","endLine":4,"endColumn":23},{"ruleId":"57","severity":1,"message":"62","line":4,"column":25,"nodeType":"59","messageId":"60","endLine":4,"endColumn":28},{"ruleId":"57","severity":1,"message":"63","line":4,"column":30,"nodeType":"59","messageId":"60","endLine":4,"endColumn":35},{"ruleId":"57","severity":1,"message":"64","line":4,"column":37,"nodeType":"59","messageId":"60","endLine":4,"endColumn":43},{"ruleId":"57","severity":1,"message":"65","line":9,"column":10,"nodeType":"59","messageId":"60","endLine":9,"endColumn":15},{"ruleId":"57","severity":1,"message":"66","line":9,"column":17,"nodeType":"59","messageId":"60","endLine":9,"endColumn":25},{"ruleId":"53","replacedBy":"67"},{"ruleId":"55","replacedBy":"68"},{"ruleId":"57","severity":1,"message":"69","line":1,"column":16,"nodeType":"59","messageId":"60","endLine":1,"endColumn":24},{"ruleId":"57","severity":1,"message":"70","line":9,"column":11,"nodeType":"59","messageId":"60","endLine":9,"endColumn":15},{"ruleId":"71","severity":1,"message":"72","line":47,"column":29,"nodeType":"73","endLine":47,"endColumn":91},{"ruleId":"53","replacedBy":"74"},{"ruleId":"55","replacedBy":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Alert' is defined but never used.","'Button' is defined but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.",["76"],["77"],"'useState' is defined but never used.","'zero' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["76"],["77"],"no-global-assign","no-unsafe-negation"]